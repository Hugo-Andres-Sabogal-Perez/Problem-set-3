library(rio)
library(tidyverse)
require(sf)
require(leaflet)
require(osmdata)
library(raster)
library(stringr)
primary<-obtener_osmdata('highway', 'primary', 'linea')
obtener_osmdata<-function(llave, valor, tipo_dato){
### Utilizamoas osm para bogota
data <- opq(bbox = getbb("Bogotá Colombia")) %>%
add_osm_feature(key = llave , value = valor)
# cambios el tipo de objeto
data<- osmdata_sf(data)
# dejamos poligonos y name y id
if (tipo_dato=='linea'){
data <- data$osm_lines %>%
dplyr::select(osm_id, name)
}
else if (tipo_dato=='puntos'){
data <- data$osm_points %>%
dplyr::select(osm_id, name)
}
else if (tipo_dato=='poligono'){
data <- data$osm_polygons %>%
dplyr::select(osm_id, name)
}
# Convertimos a tipo de objeto sf
data<-st_as_sf(data)
return(data)
}
primary<-obtener_osmdata('highway', 'primary', 'linea')
primary<- st_cast(primary, "POINT")
sf_use_s2(FALSE) ### Linea necesaria pára correr el codigo
primary<- st_cast(primary, "POINT")
leaflet() %>%
addTiles() %>%
addPolylines(data = primary)
View(primary)
require(leaflet)
leaflet() %>%
addTiles() %>%
addCircles(data = primary)
motorway<-obtener_osmdata('highway', 'motorway', 'linea')
motorway<- st_cast(primary, "POINT")
#
##Trunk (avenida caracas)
motorway<-obtener_osmdata('highway', 'trunk', 'linea')
motorway<- st_cast(primary, "POINT")
primary<-obtener_osmdata('highway', 'primary', 'linea')
primary<- st_cast(primary, "POINT")
#motorway (autopiesta norte)
motorway<-obtener_osmdata('highway', 'motorway', 'linea')
motorway<- st_cast(primary, "POINT")
#
##Trunk (avenida caracas)
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
trunk<- st_cast(primary, "POINT")
View(motorway)
primary<- rbind(primary,motorway, trunk)
leaflet() %>%
addTiles() %>%
addCircles(data = primary)
leaflet() %>%
addTiles() %>%
addCircles(data = trunk)
primary<-obtener_osmdata('highway', 'primary', 'linea')
primary<- st_cast(primary, "POINT")
#motorway (autopiesta norte)
motorway<-obtener_osmdata('highway', 'motorway', 'linea')
motorway<- st_cast(motorway, "POINT")
#
##Trunk (avenida caracas)
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
trunk<- st_cast(trunk, "POINT")
leaflet() %>%
addTiles() %>%
addCircles(data = trunk)
leaflet() %>%
addTiles() %>%
addCircles(data = motorway)
motorway<-obtener_osmdata('highway', 'motorway', 'linea')
leaflet() %>%
addTiles() %>%
addCircles(data = motorway)
leaflet() %>%
addTiles() %>%
addPolylines(data = motorway)
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
leaflet() %>%
addTiles() %>%
addPolylines(data = trunk)
primary<-obtener_osmdata('highway', 'primary', 'linea')
primary<- st_cast(primary, "POINT")
##Trunk (avenida caracas, NQS y automista norte y sur)
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
trunk<- st_cast(trunk, "POINT")
primary<- rbind(primary, trunk)
leaflet() %>%
addTiles() %>%
addPolylines(data = primary)
class(primary)
View(primary)
leaflet() %>%
addTiles() %>%
addCircles(data = primary)
train_su<-import('Stores/inputs/train.csv')
#FIjamos directorio
setwd(substr(getwd(), 1, nchar(getwd()) - 8))
#limpiar entorno
rm(list = ls())
#librerias
library(rio)
library(tidyverse)
require(sf)
require(leaflet)
require(osmdata)
library(raster)
library(stringr)
##importamos datos de entrenamiento y pruebas
train_su<-import('Stores/inputs/train.csv')
test_su<-import('Stores/inputs/test.csv')
primary<-obtener_osmdata('highway', 'primary', 'linea')
obtener_osmdata<-function(llave, valor, tipo_dato){
### Utilizamoas osm para bogota
data <- opq(bbox = getbb("Bogotá Colombia")) %>%
add_osm_feature(key = llave , value = valor)
# cambios el tipo de objeto
data<- osmdata_sf(data)
# dejamos poligonos y name y id
if (tipo_dato=='linea'){
data <- data$osm_lines %>%
dplyr::select(osm_id, name)
}
else if (tipo_dato=='puntos'){
data <- data$osm_points %>%
dplyr::select(osm_id, name)
}
else if (tipo_dato=='poligono'){
data <- data$osm_polygons %>%
dplyr::select(osm_id, name)
}
# Convertimos a tipo de objeto sf
data<-st_as_sf(data)
return(data)
}
primary<-obtener_osmdata('highway', 'primary', 'linea')
primary<- st_cast(primary, "POINT")
##Trunk (avenida caracas, NQS y automista norte y sur)
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
trunk<- st_cast(trunk, "POINT")
#Creamos un dataframe unificado
primary<- rbind(primary, trunk)
train_sf<-distneastfeat(train_sf, primary, 'distprimary_nearest','punto')
distneastfeat<-function(data_original, data_feat, n_variable, tipo_dato){
##Calculamos centroides si poligono
if (tipo_dato=='poligono'){
data_feat <- st_centroid(data_feat, byid = T)
}
else{
NA
}
##Calculamos distancias
dist_matrix <- st_distance(x = data_original, y = data_feat)
#Distancia minima
dist_min <- apply(dist_matrix, 1, min)
data_original[,n_variable]<-dist_min
return(data_original)
}
train_sf<-distneastfeat(train_sf, primary, 'distprimary_nearest','punto')
convert_dfsf<-function(datos){
datos_sf <- st_as_sf(datos, coords = c("lon", "lat"), crs = 4326)
return(datos_sf)
}
train_sf<-convert_dfsf(train_su)
test_sf<-convert_dfsf(test_su)
train_sf<-distneastfeat(train_sf, primary, 'distprimary_nearest','punto')
cicloruta<-st_read("Stores/inputs/ciclorruta/ciclorruta.shp")
leaflet() %>%
addTiles() %>%
addCircles(data = cicloruta)
leaflet() %>%
addTiles() %>%
addPolygons(data = cicloruta)
cicloruta <- st_transform(cicloruta, st_crs(train_sf))
cicloruta <- st_cast(cicloruta, "POINT")
leaflet() %>%
addTiles() %>%
addPolygons(data = cicloruta)
leaflet() %>%
addTiles() %>%
addCircles(data = cicloruta)
train_sf<-distneastfeat(train_sf, cicloruta, 'distcicloruta_nearest','punto')
manzanas_aval<-st_read("Stores/inputs/avaluo_manz/Avaluo_Manzana.shp")
View(manzanas_aval)
train_sf<-st_join(train_sf, manzanas_aval , join = st_nearest_feature)
sf_use_s2(FALSE) ### Linea necesaria pára correr el codigo
#Asignación avaluo de manzasa
train_sf<-st_join(train_sf, manzanas_aval , join = st_nearest_feature)
test_sf<-st_join(test_sf, manzanas_aval , join = st_nearest_feature)
View(train_sf)
