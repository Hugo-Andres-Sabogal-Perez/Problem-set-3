library(rio)
library(tidyverse)
require(sf)
require(leaflet)
require(osmdata)
library(raster)
library(stringr)
primary<-obtener_osmdata('highway', 'primary', 'linea')
obtener_osmdata<-function(llave, valor, tipo_dato){
### Utilizamoas osm para bogota
data <- opq(bbox = getbb("Bogotá Colombia")) %>%
add_osm_feature(key = llave , value = valor)
# cambios el tipo de objeto
data<- osmdata_sf(data)
# dejamos poligonos y name y id
if (tipo_dato=='linea'){
data <- data$osm_lines %>%
dplyr::select(osm_id, name)
}
else if (tipo_dato=='puntos'){
data <- data$osm_points %>%
dplyr::select(osm_id, name)
}
else if (tipo_dato=='poligono'){
data <- data$osm_polygons %>%
dplyr::select(osm_id, name)
}
# Convertimos a tipo de objeto sf
data<-st_as_sf(data)
return(data)
}
primary<-obtener_osmdata('highway', 'primary', 'linea')
primary<- st_cast(primary, "POINT")
sf_use_s2(FALSE) ### Linea necesaria pára correr el codigo
primary<- st_cast(primary, "POINT")
leaflet() %>%
addTiles() %>%
addPolylines(data = primary)
View(primary)
require(leaflet)
leaflet() %>%
addTiles() %>%
addCircles(data = primary)
motorway<-obtener_osmdata('highway', 'motorway', 'linea')
motorway<- st_cast(primary, "POINT")
#
##Trunk (avenida caracas)
motorway<-obtener_osmdata('highway', 'trunk', 'linea')
motorway<- st_cast(primary, "POINT")
primary<-obtener_osmdata('highway', 'primary', 'linea')
primary<- st_cast(primary, "POINT")
#motorway (autopiesta norte)
motorway<-obtener_osmdata('highway', 'motorway', 'linea')
motorway<- st_cast(primary, "POINT")
#
##Trunk (avenida caracas)
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
trunk<- st_cast(primary, "POINT")
View(motorway)
primary<- rbind(primary,motorway, trunk)
leaflet() %>%
addTiles() %>%
addCircles(data = primary)
leaflet() %>%
addTiles() %>%
addCircles(data = trunk)
primary<-obtener_osmdata('highway', 'primary', 'linea')
primary<- st_cast(primary, "POINT")
#motorway (autopiesta norte)
motorway<-obtener_osmdata('highway', 'motorway', 'linea')
motorway<- st_cast(motorway, "POINT")
#
##Trunk (avenida caracas)
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
trunk<- st_cast(trunk, "POINT")
leaflet() %>%
addTiles() %>%
addCircles(data = trunk)
leaflet() %>%
addTiles() %>%
addCircles(data = motorway)
motorway<-obtener_osmdata('highway', 'motorway', 'linea')
leaflet() %>%
addTiles() %>%
addCircles(data = motorway)
leaflet() %>%
addTiles() %>%
addPolylines(data = motorway)
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
leaflet() %>%
addTiles() %>%
addPolylines(data = trunk)
primary<-obtener_osmdata('highway', 'primary', 'linea')
primary<- st_cast(primary, "POINT")
##Trunk (avenida caracas, NQS y automista norte y sur)
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
trunk<- st_cast(trunk, "POINT")
primary<- rbind(primary, trunk)
leaflet() %>%
addTiles() %>%
addPolylines(data = primary)
class(primary)
View(primary)
leaflet() %>%
addTiles() %>%
addCircles(data = primary)
train_su<-import('Stores/inputs/train.csv')
require(pacman)
p_load(tidyverse)
setwd(substr(getwd(), 1, nchar(getwd()) - 8))
#limpiar en entorno
rm(list = ls())
#Librerias
require(pacman)
p_load(tidyverse)
train_textz<-import('Stores/outputs/text_mining_train.csv')
p_load(tidyverse,
rio)
train_textz<-import('Stores/outputs/text_mining_train.csv')
train_text<-import('Stores/outputs/text_mining_train.csv')
rm(train_textz)
train_area<-import('Stores/outputs/train_imp_area.rds'
)
View(train_text)
train_geo<-import('Stores/outputs/train_geo.rds')
test_text<-import('Stores/outputs/text_mining_test.csv')
test_area<-import('Stores/outputs/test_imp_area.rds')
test_geo<-import('Stores/outputs/test_geo.rds')
train<-left_join(train_geo, train_text, by='property_id')
train_geo<-as.data.frame(train_geo)
test_geo<-as.data.frame(test_geo)
train<-left_join(train_geo, train_text, by='property_id')
p_load(tidyverse,
rio,
sf)
train_text<-st_as_sf(train_text)
ubi_train<-train_geo %>% select(property_id, geometry)
View(ubi_train)
ubi_test<-test_geo %>% select(property_id, geometry)
test_geo<-test_geo %>% select(-geometry)
train<-left_join(train_geo, train_text, by='property_id')
View(train)
train<-left_join(train, train_area, by='property_id')
View(test_text)
View(train)
View(train)
train_prueba<-train %>% select(property_id, bathrooms, n_baños, n_cuartos)
train_prueba<-train %>% select(property_id, bathrooms, n_banos, n_cuartos)
colnames(train)
###Miramos algo
train_prueba<-train %>% select(property_id, bethrooms, n_cuartos)
View(train)
train_prueba<-train %>% select(property_id, bedrooms, n_cuartos)
View(train_prueba)
sum(is.na(train$bedrooms))
sum(is.na(train$bathrooms))
corr(train$n_cuartos, train$bedrooms)
cor(train$n_cuartos, train$bedrooms)
