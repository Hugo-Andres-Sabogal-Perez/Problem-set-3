require(pacman)
p_load(tidyverse,fixest, stargazer,knitr,kableExtra,jtools,ggstance,broom,broom.mixed,skimr)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
install.packages("pacman")
source("~/.active-rstudio-document")
install.packages("pacman")
install.packages("pacman")
require(pacman)
p_load(rio,tidyverse,skimr,visdat,corrplot,stargazer)
df <- import("https://github.com/ignaciomsarmiento/datasets/blob/main/GEIH_sample1.Rds?raw=true")
install.packages("pacman")
source("~/.active-rstudio-document")
install.packages("pacman")
source("~/.active-rstudio-document", echo=TRUE)
install.packages("pacman")
source("~/.active-rstudio-document")
install.packages("pacman")
source("~/.active-rstudio-document", echo=TRUE)
install.packages("pacman")
source("~/.active-rstudio-document", echo=TRUE)
install.packages("pacman")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
exp(reg1$coef[1]+reg1$coef[2]*16)
reg1$coef[1]
rm(list=ls())
install.packages("pacman")
require("pacman")
p_load("tidyverse","stargazer")
nlsy <- read_csv('https://raw.githubusercontent.com/ignaciomsarmiento/datasets/main/nlsy97.csv')
#Housekeeping
nlsy <- nlsy  %>%   drop_na(educ) #dropea los valores faltantes (NA)
head(nlsy)
reg1<- lm(lnw_2016~educ,   data = nlsy)
reg2<- lm(lnw_2016~educ+ exp,   data = nlsy)
stargazer(reg1,reg2,type="text") #Similar en stata: outreg2
reg1$coef
reg1$coef[1]
reg1$coef[1]+reg1$coef[2]*16
exp(reg1$coef[1]+reg1$coef[2]*16)
rm(list = ls())
# Set directory:
setwd('/Users/mapaosuna/Desktop/Octavo Semestre/Big Data/Talleres/Taller 3/Problem-set-3/Stores/inputs')
# Llamamos las librerías necesarias para la realización del trabajo
require(pacman)
require(tidyverse)
require(rio)
require(caret)
require(gridExtra)
require(skimr)
require(tidytable)
require(VIM)
require(leaps)
require(koRpus)
require(hunspell)
require(textstem)
train <- read.table('train.csv', header = T, sep = ",")
test <- read.table('test.csv', header = T, sep = ",")
train$description = as.character(train$description)
### Creacion de variables de texto:
texto = train %>% select(c('property_id', 'title', 'description'))
# Extraccion de numero de pisos:
# A: Estructura mas restrictiva:
pisos = '(\\w+|\\d+)\\s+(pisos|plantas|niveles)\\b'
PISOS <- regmatches(texto$description, regexec(pisos, texto$description))
texto$pisos <- sapply(PISOS, function(x) ifelse(length(x) > 1, x[2], NA))
# B: Estructura menos restrictiva:
pisos = '(\\w+|\\d+)\\s*(pisos|plantas|niveles)\\b'
PISOS <- regmatches(texto$description, regexec(pisos, texto$description))
texto$pisosb <- sapply(PISOS, function(x) ifelse(length(x) > 1, x[2], NA))
# Extraccion de area:
area = "(\\w+|\\d+)\\s+(m2|mt2|mts2|metros cuadrados|metros)\\b"
AREA = regmatches(texto$description, regexec(area, texto$description))
texto$area <- sapply(AREA, function(x) ifelse(length(x) > 1, x[2], NA))
# Parqueaderos:
parqueaderos = '(\\w+|\\d+)\\s+(parqueaderos)\\b'
PAR = regmatches(texto$description, regexec(parqueaderos, texto$description))
texto$n_parqueaderos = sapply(PAR, function(x) ifelse(length(x) > 1, x[2], NA))
# Cuartos:
cuartos =
'(\\w+|\\d+)\\s+(cuartos|alcobas|piezas|habitaciones|cuarto|alcoba|pieza|habitacion)\\b'
CUAR = regmatches(texto$description, regexec(cuartos, texto$description))
texto$n_cuartos = sapply(CUAR, function(x) ifelse(length(x) > 1, x[2], NA))
# Correccion de errores ortograficos:
texto$desc_corregido = lapply(texto$description,
function(palabras) hunspell(palabras))
# Stemming y lemantizacion:
texto$desc_corregido_lemma <- lapply(texto$desc_corregido,
function(palabras) lemmatize_words(palabras, language = "es"))
#
palabras = c()
palabras = append(palabras, lapply(texto$desc_corregido_lemma,
function(desc) unlist(desc)))
palabras = unlist(palabras)
unicas = unique(palabras)
# Eliminacion de palabras vacias:
vacias = c('el', 'la', 'los', 'las', 'de', 'y', 'a', 'para', 'como', 'muy',
'o', 'por', 'es', 'se', 'le', 'que', 'al', 'tu', 'tus', 'si', 'asi')
unicas = unicas[!(unicas %in% vacias)]
unicas = sort(unicas)
unicas[5250:10498]
