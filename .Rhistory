library(rio)
library(tidyverse)
require(sf)
require(leaflet)
require(osmdata)
library(raster)
library(stringr)
primary<-obtener_osmdata('highway', 'primary', 'linea')
obtener_osmdata<-function(llave, valor, tipo_dato){
### Utilizamoas osm para bogota
data <- opq(bbox = getbb("Bogotá Colombia")) %>%
add_osm_feature(key = llave , value = valor)
# cambios el tipo de objeto
data<- osmdata_sf(data)
# dejamos poligonos y name y id
if (tipo_dato=='linea'){
data <- data$osm_lines %>%
dplyr::select(osm_id, name)
}
else if (tipo_dato=='puntos'){
data <- data$osm_points %>%
dplyr::select(osm_id, name)
}
else if (tipo_dato=='poligono'){
data <- data$osm_polygons %>%
dplyr::select(osm_id, name)
}
# Convertimos a tipo de objeto sf
data<-st_as_sf(data)
return(data)
}
primary<-obtener_osmdata('highway', 'primary', 'linea')
primary<- st_cast(primary, "POINT")
sf_use_s2(FALSE) ### Linea necesaria pára correr el codigo
primary<- st_cast(primary, "POINT")
leaflet() %>%
addTiles() %>%
addPolylines(data = primary)
View(primary)
require(leaflet)
leaflet() %>%
addTiles() %>%
addCircles(data = primary)
motorway<-obtener_osmdata('highway', 'motorway', 'linea')
motorway<- st_cast(primary, "POINT")
#
##Trunk (avenida caracas)
motorway<-obtener_osmdata('highway', 'trunk', 'linea')
motorway<- st_cast(primary, "POINT")
primary<-obtener_osmdata('highway', 'primary', 'linea')
primary<- st_cast(primary, "POINT")
#motorway (autopiesta norte)
motorway<-obtener_osmdata('highway', 'motorway', 'linea')
motorway<- st_cast(primary, "POINT")
#
##Trunk (avenida caracas)
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
trunk<- st_cast(primary, "POINT")
View(motorway)
primary<- rbind(primary,motorway, trunk)
leaflet() %>%
addTiles() %>%
addCircles(data = primary)
leaflet() %>%
addTiles() %>%
addCircles(data = trunk)
primary<-obtener_osmdata('highway', 'primary', 'linea')
primary<- st_cast(primary, "POINT")
#motorway (autopiesta norte)
motorway<-obtener_osmdata('highway', 'motorway', 'linea')
motorway<- st_cast(motorway, "POINT")
#
##Trunk (avenida caracas)
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
trunk<- st_cast(trunk, "POINT")
leaflet() %>%
addTiles() %>%
addCircles(data = trunk)
leaflet() %>%
addTiles() %>%
addCircles(data = motorway)
motorway<-obtener_osmdata('highway', 'motorway', 'linea')
leaflet() %>%
addTiles() %>%
addCircles(data = motorway)
leaflet() %>%
addTiles() %>%
addPolylines(data = motorway)
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
leaflet() %>%
addTiles() %>%
addPolylines(data = trunk)
primary<-obtener_osmdata('highway', 'primary', 'linea')
primary<- st_cast(primary, "POINT")
##Trunk (avenida caracas, NQS y automista norte y sur)
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
trunk<- st_cast(trunk, "POINT")
primary<- rbind(primary, trunk)
leaflet() %>%
addTiles() %>%
addPolylines(data = primary)
class(primary)
View(primary)
leaflet() %>%
addTiles() %>%
addCircles(data = primary)
train_su<-import('Stores/inputs/train.csv')
#Script manipulacion de datos de porblem set 3
#FIjamos directorio
setwd(substr(getwd(), 1, nchar(getwd()) - 8))
#limpiar entorno
rm(list = ls())
#librerias
library(rio)
library(tidyverse)
require(sf)
require(leaflet)
require(osmdata)
library(raster)
library(stringr)
train<-import('Stores/outputs/train_geo.rds')
test<-import('Stores/outputs/test_geo.rds')
View(test)
train<- train %>% subset(OBEJTID,
CODIGO_MAN,
CODIGO_CRI,
NORMATIVA,
ACTO_ADMIN,
NUMERO_ACT,
ESCALA_CAP,
FECHA_CAPT,
FECHA_ACTO,
SHAPE_AREA,
SHAPE_LEN,
SHAPE_Leng.x,
SHAPE_Area.x,
SHAPE_Leng.y,
SHAPE_LEN,
SHAPE_Area,
SCATIPO,
SCACODIGO,
GLOBALID,
OBSERVACIO,
LocAAdmini,
LocArea,
LocCodigo)
train<- train %>% subset(OBJECTID.x,
OBEJECTID.y,
CODIGO_MAN,
CODIGO_CRI,
NORMATIVA,
ACTO_ADMIN,
NUMERO_ACT,
ESCALA_CAP,
FECHA_CAPT,
FECHA_ACTO,
SHAPE_AREA,
SHAPE_LEN,
SHAPE_Leng.x,
SHAPE_Area.x,
SHAPE_Leng.y,
SHAPE_LEN,
SHAPE_Area,
SCATIPO,
SCACODIGO,
GLOBALID,
OBSERVACIO,
LocAAdmini,
LocArea,
LocCodigo)
View(train)
train<- train %>% dplyr::select(-OBJECTID.x,
-OBEJECTID.y,
-CODIGO_MAN,
-CODIGO_CRI,
-NORMATIVA,
-ACTO_ADMIN,
-NUMERO_ACT,
-ESCALA_CAP,
-FECHA_CAPT,
-FECHA_ACTO,
-SHAPE_AREA,
-SHAPE_LEN,
-SHAPE_Leng.x,
-SHAPE_Area.x,
-SHAPE_Leng.y,
-SHAPE_LEN,
-SHAPE_Area,
-SCATIPO,
-SCACODIGO,
-GLOBALID,
-OBSERVACIO,
-LocAAdmini,
-LocArea,
-LocCodigo)
train<- train %>% dplyr::select(-OBJECTID.x,
-CODIGO_MAN,
-CODIGO_CRI,
-NORMATIVA,
-ACTO_ADMIN,
-NUMERO_ACT,
-ESCALA_CAP,
-FECHA_CAPT,
-FECHA_ACTO,
-SHAPE_AREA,
-SHAPE_LEN,
-SHAPE_Leng.x,
-SHAPE_Area.x,
-SHAPE_Leng.y,
-SHAPE_LEN,
-SHAPE_Area,
-SCATIPO,
-SCACODIGO,
-GLOBALID,
-OBSERVACIO,
-LocAAdmini,
-LocArea,
-LocCodigo)
train<-import('Stores/outputs/train_geo.rds')
test<-import('Stores/outputs/test_geo.rds')
train<- train %>% dplyr::select(-OBJECTID.x,
-CODIGO_MAN,
-CODIGO_CRI,
-NORMATIVA,
-ACTO_ADMIN,
-NUMERO_ACT,
-ESCALA_CAP,
-FECHA_CAPT,
-FECHA_ACTO,
-SHAPE_AREA,
-SHAPE_LEN,
-SHAPE_Leng.x,
-SHAPE_Area.x,
-SHAPE_Leng.y,
-SHAPE_LEN,
-SHAPE_Area,
-SCATIPO,
-SCACODIGO,
-GLOBALID,
-OBSERVACIO,
-LocAAdmini,
-LocArea,
-LocCodigo,
-SHAPE_Leng,
-SHAPE_Area.y,
-CP_TERR_AR,
-GRUPOP_TER,
-RESPONSABL,
-CODIGO_ZON)
View(train)
trains$OBJECTID.y
train$OBJECTID.y
train<-import('Stores/outputs/train_geo.rds')
test<-import('Stores/outputs/test_geo.rds')
train<- train %>% dplyr::select(-OBJECTID.x,
-CODIGO_MAN,
-CODIGO_CRI,
-NORMATIVA,
-ACTO_ADMIN,
-NUMERO_ACT,
-ESCALA_CAP,
-FECHA_CAPT,
-FECHA_ACTO,
-SHAPE_AREA,
-SHAPE_LEN,
-SHAPE_Leng.x,
-SHAPE_Area.x,
-SHAPE_Leng.y,
-SHAPE_LEN,
-SHAPE_Area,
-SCATIPO,
-SCACODIGO,
-GLOBALID,
-OBSERVACIO,
-LocAAdmini,
-LocArea,
-LocCodigo,
-SHAPE_Leng,
-SHAPE_Area.y,
-CP_TERR_AR,
-GRUPOP_TER,
-RESPONSABL,
-CODIGO_ZON,
-MANZANA_ID,
-OBJECTID.y)
rias test
test<- test %>% dplyr::select(-OBJECTID.x,
-CODIGO_MAN,
-CODIGO_CRI,
-NORMATIVA,
-ACTO_ADMIN,
-NUMERO_ACT,
-ESCALA_CAP,
-FECHA_CAPT,
-FECHA_ACTO,
-SHAPE_AREA,
-SHAPE_LEN,
-SHAPE_Leng.x,
-SHAPE_Area.x,
-SHAPE_Leng.y,
-SHAPE_LEN,
-SHAPE_Area,
-SCATIPO,
-SCACODIGO,
-GLOBALID,
-OBSERVACIO,
-LocAAdmini,
-LocArea,
-LocCodigo,
-SHAPE_Leng,
-SHAPE_Area.y,
-CP_TERR_AR,
-GRUPOP_TER,
-RESPONSABL,
-CODIGO_ZON,
-MANZANA_ID,
-OBJECTID.y)
View(test)
train<- train  %>% rename('AVALUO_COM'='avaluo_comercialmanz',
'AVALUO_CAT'='avaluo_catastromanz',
'SCANOMBRE'='nombre_secto')
train<- train  %>% rename('avaluo_comercialmanz'='AVALUO_COM',
'avaluo_catastromanz'='AVALUO_CAT',
'nombre_sectot'='SCANOMBRE')
View(test)
rm(list = ls())
#imprtamos datos
train<-import('Stores/outputs/train_geo.rds')
test<-import('Stores/outputs/test_geo.rds')
#Borramos variables innecesarias train
train<- train %>% dplyr::select(-OBJECTID.x,
-CODIGO_MAN,
-CODIGO_CRI,
-NORMATIVA,
-ACTO_ADMIN,
-NUMERO_ACT,
-ESCALA_CAP,
-FECHA_CAPT,
-FECHA_ACTO,
-SHAPE_AREA,
-SHAPE_LEN,
-SHAPE_Leng.x,
-SHAPE_Area.x,
-SHAPE_Leng.y,
-SHAPE_LEN,
-SHAPE_Area,
-SCATIPO,
-SCACODIGO,
-GLOBALID,
-OBSERVACIO,
-LocAAdmini,
-LocArea,
-LocCodigo,
-SHAPE_Leng,
-SHAPE_Area.y,
-CP_TERR_AR,
-GRUPOP_TER,
-RESPONSABL,
-CODIGO_ZON,
-MANZANA_ID,
-OBJECTID.y)
#Borramos variables innecesarias test
test<- test %>% dplyr::select(-OBJECTID.x,
-CODIGO_MAN,
-CODIGO_CRI,
-NORMATIVA,
-ACTO_ADMIN,
-NUMERO_ACT,
-ESCALA_CAP,
-FECHA_CAPT,
-FECHA_ACTO,
-SHAPE_AREA,
-SHAPE_LEN,
-SHAPE_Leng.x,
-SHAPE_Area.x,
-SHAPE_Leng.y,
-SHAPE_LEN,
-SHAPE_Area,
-SCATIPO,
-SCACODIGO,
-GLOBALID,
-OBSERVACIO,
-LocAAdmini,
-LocArea,
-LocCodigo,
-SHAPE_Leng,
-SHAPE_Area.y,
-CP_TERR_AR,
-GRUPOP_TER,
-RESPONSABL,
-CODIGO_ZON,
-MANZANA_ID,
-OBJECTID.y)
## Cambiamos nombres de algunas variables
train<- train  %>% rename('avaluo_comercialmanz'='AVALUO_COM',
'avaluo_catastromanz'='AVALUO_CAT',
'nombre_sector'='SCANOMBRE',
'n_delitossexales'='n_delitossexuales')
train<- train  %>% rename('avaluo_comercialmanz'='AVALUO_COM',
'avaluo_catastromanz'='AVALUO_CAT',
'nombre_sector'='SCANOMBRE',
'n_delitossexuales'='n_delitossexales')
test<- test  %>% rename('avaluo_comercialmanz'='AVALUO_COM',
'avaluo_catastromanz'='AVALUO_CAT',
'nombre_sector'='SCANOMBRE',
'n_delitossexuales'='n_delitossexales')
export(train, 'Stores/outputs/train_geo.rds')
export(test, 'Stores/outputs/test_geo.rds')
rm(list = ls())
# Set directory:
setwd(substr(getwd(), 1, nchar(getwd()) - 8))
# Importamos bases de datos
train <- read.table(unz('train.csv.zip', 'train.csv'), header = T, sep = ",")
train <- import('Stores/train.csv')
getwd()
train <- import('Stores/inputs/train.csv')
View(train)
### Creacion de variables de texto:
texto = train %>% select(c('property_id', 'title', 'description'))
require(tidyverse)
