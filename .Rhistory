library(rio)
library(tidyverse)
require(sf)
require(leaflet)
require(osmdata)
library(raster)
library(stringr)
primary<-obtener_osmdata('highway', 'primary', 'linea')
obtener_osmdata<-function(llave, valor, tipo_dato){
### Utilizamoas osm para bogota
data <- opq(bbox = getbb("Bogotá Colombia")) %>%
add_osm_feature(key = llave , value = valor)
# cambios el tipo de objeto
data<- osmdata_sf(data)
# dejamos poligonos y name y id
if (tipo_dato=='linea'){
data <- data$osm_lines %>%
dplyr::select(osm_id, name)
}
else if (tipo_dato=='puntos'){
data <- data$osm_points %>%
dplyr::select(osm_id, name)
}
else if (tipo_dato=='poligono'){
data <- data$osm_polygons %>%
dplyr::select(osm_id, name)
}
# Convertimos a tipo de objeto sf
data<-st_as_sf(data)
return(data)
}
primary<-obtener_osmdata('highway', 'primary', 'linea')
primary<- st_cast(primary, "POINT")
sf_use_s2(FALSE) ### Linea necesaria pára correr el codigo
primary<- st_cast(primary, "POINT")
leaflet() %>%
addTiles() %>%
addPolylines(data = primary)
View(primary)
require(leaflet)
leaflet() %>%
addTiles() %>%
addCircles(data = primary)
motorway<-obtener_osmdata('highway', 'motorway', 'linea')
motorway<- st_cast(primary, "POINT")
#
##Trunk (avenida caracas)
motorway<-obtener_osmdata('highway', 'trunk', 'linea')
motorway<- st_cast(primary, "POINT")
primary<-obtener_osmdata('highway', 'primary', 'linea')
primary<- st_cast(primary, "POINT")
#motorway (autopiesta norte)
motorway<-obtener_osmdata('highway', 'motorway', 'linea')
motorway<- st_cast(primary, "POINT")
#
##Trunk (avenida caracas)
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
trunk<- st_cast(primary, "POINT")
View(motorway)
primary<- rbind(primary,motorway, trunk)
leaflet() %>%
addTiles() %>%
addCircles(data = primary)
leaflet() %>%
addTiles() %>%
addCircles(data = trunk)
primary<-obtener_osmdata('highway', 'primary', 'linea')
primary<- st_cast(primary, "POINT")
#motorway (autopiesta norte)
motorway<-obtener_osmdata('highway', 'motorway', 'linea')
motorway<- st_cast(motorway, "POINT")
#
##Trunk (avenida caracas)
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
trunk<- st_cast(trunk, "POINT")
leaflet() %>%
addTiles() %>%
addCircles(data = trunk)
leaflet() %>%
addTiles() %>%
addCircles(data = motorway)
motorway<-obtener_osmdata('highway', 'motorway', 'linea')
leaflet() %>%
addTiles() %>%
addCircles(data = motorway)
leaflet() %>%
addTiles() %>%
addPolylines(data = motorway)
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
leaflet() %>%
addTiles() %>%
addPolylines(data = trunk)
primary<-obtener_osmdata('highway', 'primary', 'linea')
primary<- st_cast(primary, "POINT")
##Trunk (avenida caracas, NQS y automista norte y sur)
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
trunk<- st_cast(trunk, "POINT")
primary<- rbind(primary, trunk)
leaflet() %>%
addTiles() %>%
addPolylines(data = primary)
class(primary)
View(primary)
leaflet() %>%
addTiles() %>%
addCircles(data = primary)
train_su<-import('Stores/inputs/train.csv')
rm(list = ls())
setwd(substr(getwd(), 1, nchar(getwd()) - 8))
test_estat_des<-import('test_estat_desc.rds')
p_load(rio,
tidyverse,
sf)
library(pacman)
p_load(rio,
tidyverse,
sf)
p_load(rio,
tidyverse,
sf,
tidytable)
test_estat_des<-import('test_estat_desc.rds')
test_estat_des<-import('Stores/outputs/test_estat_desc.rds')
train_estat_des<- import("Stores/outputs/train_estat_desc.rds")
p_load(rio,
tidyverse,
sf,
tidytable,
xtable)
tabla <- data.frame(train_estat_des$rooms, train_estat_des$bedrooms, train_estat_des$n_baños, train_estat_des$n_parqueaderos, train_estat_des$ESTRATO, train_estat_des$avaluo_catastromanz, train_estat_des$pisos)
vars <- length(colnames(tabla))
EstDesc <- data.frame(
"Variable" = colnames(tabla), "Observaciones" = rep(NA, vars), "Media" = rep(NA, vars),
"Desviacion_Estandar" = rep(NA, vars), "Min" = rep(NA, vars), "Max" = rep(NA, vars))
for (col in colnames(tabla)) {
df <- tabla %>% select(col)
Obs <- nrow(df)
mean <- mean(as.numeric(unlist(df)), na.rm = T)
sd <- sqrt(var(df, na.rm = T))
min <- min(as.numeric(unlist(df)), na.rm = T)
max <- max(as.numeric(unlist(df)), na.rm = T)
EstDesc[EstDesc$Variable == col, 2] <- Obs
EstDesc[EstDesc$Variable == col, 3] <- mean
EstDesc[EstDesc$Variable == col, 4] <- sd
EstDesc[EstDesc$Variable == col, 5] <- min
EstDesc[EstDesc$Variable == col, 6] <- max
}
View(tabla)
require(xtable)
tabla_estadisticas <- xtable(EstDesc, type = "latex")
print(tabla_estadisticas, file = "Views/estadisticas.tex")
table(train_estat_des$balcon)
table(train_estat_des$bbq)
table(train_estat_des$deposito)
table(train_estat_des$ascensor)
table(train_estat_des$patio)
