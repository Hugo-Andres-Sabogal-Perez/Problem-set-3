library(rio)
library(tidyverse)
require(sf)
require(leaflet)
require(osmdata)
library(raster)
library(stringr)
primary<-obtener_osmdata('highway', 'primary', 'linea')
obtener_osmdata<-function(llave, valor, tipo_dato){
### Utilizamoas osm para bogota
data <- opq(bbox = getbb("Bogotá Colombia")) %>%
add_osm_feature(key = llave , value = valor)
# cambios el tipo de objeto
data<- osmdata_sf(data)
# dejamos poligonos y name y id
if (tipo_dato=='linea'){
data <- data$osm_lines %>%
dplyr::select(osm_id, name)
}
else if (tipo_dato=='puntos'){
data <- data$osm_points %>%
dplyr::select(osm_id, name)
}
else if (tipo_dato=='poligono'){
data <- data$osm_polygons %>%
dplyr::select(osm_id, name)
}
# Convertimos a tipo de objeto sf
data<-st_as_sf(data)
return(data)
}
primary<-obtener_osmdata('highway', 'primary', 'linea')
primary<- st_cast(primary, "POINT")
sf_use_s2(FALSE) ### Linea necesaria pára correr el codigo
primary<- st_cast(primary, "POINT")
leaflet() %>%
addTiles() %>%
addPolylines(data = primary)
View(primary)
require(leaflet)
leaflet() %>%
addTiles() %>%
addCircles(data = primary)
motorway<-obtener_osmdata('highway', 'motorway', 'linea')
motorway<- st_cast(primary, "POINT")
#
##Trunk (avenida caracas)
motorway<-obtener_osmdata('highway', 'trunk', 'linea')
motorway<- st_cast(primary, "POINT")
primary<-obtener_osmdata('highway', 'primary', 'linea')
primary<- st_cast(primary, "POINT")
#motorway (autopiesta norte)
motorway<-obtener_osmdata('highway', 'motorway', 'linea')
motorway<- st_cast(primary, "POINT")
#
##Trunk (avenida caracas)
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
trunk<- st_cast(primary, "POINT")
View(motorway)
primary<- rbind(primary,motorway, trunk)
leaflet() %>%
addTiles() %>%
addCircles(data = primary)
leaflet() %>%
addTiles() %>%
addCircles(data = trunk)
primary<-obtener_osmdata('highway', 'primary', 'linea')
primary<- st_cast(primary, "POINT")
#motorway (autopiesta norte)
motorway<-obtener_osmdata('highway', 'motorway', 'linea')
motorway<- st_cast(motorway, "POINT")
#
##Trunk (avenida caracas)
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
trunk<- st_cast(trunk, "POINT")
leaflet() %>%
addTiles() %>%
addCircles(data = trunk)
leaflet() %>%
addTiles() %>%
addCircles(data = motorway)
motorway<-obtener_osmdata('highway', 'motorway', 'linea')
leaflet() %>%
addTiles() %>%
addCircles(data = motorway)
leaflet() %>%
addTiles() %>%
addPolylines(data = motorway)
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
leaflet() %>%
addTiles() %>%
addPolylines(data = trunk)
primary<-obtener_osmdata('highway', 'primary', 'linea')
primary<- st_cast(primary, "POINT")
##Trunk (avenida caracas, NQS y automista norte y sur)
trunk<-obtener_osmdata('highway', 'trunk', 'linea')
trunk<- st_cast(trunk, "POINT")
primary<- rbind(primary, trunk)
leaflet() %>%
addTiles() %>%
addPolylines(data = primary)
class(primary)
View(primary)
leaflet() %>%
addTiles() %>%
addCircles(data = primary)
train_su<-import('Stores/inputs/train.csv')
setwd(substr(getwd(), 1, nchar(getwd()) - 8))
#limpiar entorno
rm(list = ls())
#librerias
library(rio)
library(tidyverse)
require(sf)
require(leaflet)
require(osmdata)
library(raster)
library(stringr)
##importamos datos de entrenamiento y pruebas
train_su<-import('Stores/inputs/train.csv')
test_su<-import('Stores/inputs/test.csv')
manzanas_estr<-st_read("Stores/inputs/manz_estrato/ManzanaEstratificacion.shp")
localidades<- st_read("Stores/inputs/loca/Loca.shp")
sitp<- st_read("Stores/inputs/psitp/PSITP.shp")
delitos<-st_read("Stores/inputs/dai/DAILoc.shp")
restbar<-st_read("Stores/inputs/egba/EGBA.shp")
cicloruta<-st_read("Stores/inputs/ciclorruta/ciclorruta.shp")
manzanas_aval<-st_read("Stores/inputs/avaluo_manz/Avaluo_Manzana.shp")
sector<-st_read("Stores/inputs/sector/SECTOR.shp")
#Convertirmos los dataframe a tipo de datos espacial (sf)
convert_dfsf<-function(datos){
datos_sf <- st_as_sf(datos, coords = c("lon", "lat"), crs = 4326)
return(datos_sf)
}
train_sf<-convert_dfsf(train_su)
test_sf<-convert_dfsf(test_su)
## Asegurarnos de que tenga el mismo sistema de cordanas
manzanas_estr <- st_transform(manzanas_estr, st_crs(train_sf))
###Asignamos estrato
sf_use_s2(FALSE) ### Linea necesaria pára correr el codigo
st_nearest_feature(train_sf, manzanas_estr)
#Asignación de estrato
train_sf<-st_join(train_sf, manzanas_estr, join = st_nearest_feature)
test_sf<-st_join(test_sf, manzanas_estr, join = st_nearest_feature)
##Ejemmplo con la oobservacion 1
leaflet() %>%
addTiles() %>%
addCircles(data = train_sf[1,])  %>%
addPolygons(data = manzanas_estr[3408,])
##Ejemmplo con todas las obs
leaflet() %>%
addTiles() %>%
addCircles(data = train_sf)
#Asignamos localidad
#agisnamos mismo sistema de cordenadas
localidades <- st_transform(localidades, st_crs(train_sf))
with<-st_within(x=train_sf,y=localidades)
#Se realiza el pegue para conocer la localidad a la que pertence cada propiedad
train_sf<-st_join(train_sf, localidades, join = st_within)
test_sf<-st_join(test_sf, localidades, join = st_within)
### Distancia al centro comercial mas cercano
# available_tags("shop") correr esta linea para ver tags
obtener_osmdata<-function(llave, valor, tipo_dato){
### Utilizamoas osm para bogota
data <- opq(bbox = getbb("Bogotá Colombia")) %>%
add_osm_feature(key = llave , value = valor)
# cambios el tipo de objeto
data<- osmdata_sf(data)
# dejamos poligonos y name y id
if (tipo_dato=='linea'){
data <- data$osm_lines %>%
dplyr::select(osm_id, name)
}
else if (tipo_dato=='puntos'){
data <- data$osm_points %>%
dplyr::select(osm_id, name)
}
else if (tipo_dato=='poligono'){
data <- data$osm_polygons %>%
dplyr::select(osm_id, name)
}
# Convertimos a tipo de objeto sf
data<-st_as_sf(data)
return(data)
}
malls<- obtener_osmdata('shop', 'mall', 'poligono')
train_sf<-distneastfeat(train_sf, primary, 'distprimary_nearest','punto')
